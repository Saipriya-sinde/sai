At Master Node

- sudo su -
- yum install docker -y
- systemctl enable docker --now
- vim /etc/yum.repos.d/kubernetes.repo
   [kubernetes]
   name=Kubernetes
   baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
   enabled=1
   gpgcheck=1
   repo_gpgcheck=1
   gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
   exclude=kubelet kubeadm kubectl
- yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
- systemctl enable --now kubelet
- kubeadm config images pull
- vim /etc/docker/daemon.json
  {
	"exec-opts": ["native.cgroupdriver=systemd"]
  }
- systemctl restart docker
- docker info | grep -i driver
- yum install iproute-tc
- vim /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.bridge.bridge-nf-call-iptables = 1
- sysctl --system
- kubeadm init --pod-network-cidr=10.240.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem
- mkdir -p $HOME/.kube
- sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
- sudo chown $(id -u):$(id -g) $HOME/.kube/config
- kubectl get pods --all-namespaces
- kubectl get nodes
- kubeadm token create --print-join-command

In Worker Nodes

- sudo su -
- yum install docker -y
- systemctl enable docker --now
- vim /etc/yum.repos.d/kubernetes.repo
   [kubernetes]
   name=Kubernetes
   baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
   enabled=1
   gpgcheck=1
   repo_gpgcheck=1
   gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
   exclude=kubelet kubeadm kubectl
- yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
- systemctl enable --now kubelet
- kubeadm config images pull
- vim /etc/docker/daemon.json
  {
	"exec-opts": ["native.cgroupdriver=systemd"]
  }
- systemctl restart docker
- docker info | grep -i driver
- yum install iproute-tc
- vim /etc/sysctl.d/k8s.conf
  net.bridge.bridge-nf-call-ip6tables = 1
  net.bridge.bridge-nf-call-iptables = 1
- sysctl --system
- kubeadm join 172.31.20.85:6443 --token 56yflu.whelamlukpzizm7w \ --discovery-token-ca-cert-hash sha256:467834d6f7a1242431c88d6bbd306b36d344ec45e34b78bd38d0b65d56664a73f

At Master Node

- kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
- kubectl get pods --all-namespaces
- kubectl get nodes
- kubectl edit configmap kube-flannel-cfg -n kube-system
- kubectl delete pods -l app=flannel -n kube-system
- cat /var/run/flannel/subnet.env
- kubectl get pods -l k8s-app=kube-dns -n kube-system
- kubectl get pods --all-namespaces

creating a wordpress and mysql pod in respective worker nodes 

- vi wordpress.yml

apiVersion: apps/v1
kind: Deployment
metadata: 
  name: wpress
  labels:
    app: wp
spec:
  replicas: 1
  selector: 
    matchLabels: 
      app: wp
  template:
    metadata:
      labels:
	app: wp 
    spec:
      nodename: ip-172-31-16-38.ec2.internal
      containers:
       - name: wp
         image: wordpress:5.1.1-php7.3-apache

- kubectl create -f wordpress.yml
- kubectl get deploy
- kubectl get pods

- vi database.yml

apiVersion: v1
kind: Pod
metadata:
  name: "database"
  labels:
    app: mydb

spec:
  nodename: ip-172.31.29.159.ec2.internal
  containers:
  - name: "sai"
    image: "mysql:5.7"
    env:
    - name: MYSQL_ROOT_PASSWORD
      value: redhat
    - name: MYSQL_USER
      value: sai
    - name: MYSQL_PASSWORD
      value: redhat
    - name: MYSQL_DATABASE
      value: wpdb

- kubectl create -f database.yml
- kubectl get pods
- kubectl get svc

exposing wordpress pod 

- kubectl expose pod wpress-8565f564cd-t965g --port=80 --type=NodePort
- kubectl get svc

hit the wordpress pod from public of worker node where wordpress is launched with the exposed port number from any browser

- https://34.229.202.6:31958





